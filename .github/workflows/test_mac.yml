name: Test CLI - macos-latest

on:
  workflow_dispatch:
    inputs:
      base_url:
        description: 'The base url to use to download each platform'
        required: true
        default: 'http://openstudio-ci-builds.s3-website-us-west-2.amazonaws.com/PR-4731'
      os_version:
        description: 'OpenStudio Version (e.g. 3.5.0)'
        required: true
        default: '3.5.0'
      os_prerelease_tag:
        description: 'Pre-release tag (e.g. -alpha, -rc1). Leave empty if none'
        required: false
      os_build_sha:
         description: 'OpenStudio Build sha (first 10 chars)'
         required: true
         default: 'f9e7e978ae'
  repository_dispatch:
    types: [on-demand-test, on-demand-macos-test]

jobs:

  installer_macos_latest:
    runs-on: macos-latest

    steps:

    - name: Handle workflow_dispatch and repository_dispatch
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == 'workflow_dispatch' ]]; then
          echo "github.event.inputs"
          echo "${{ toJSON(github.event.inputs) }}"
          echo "BASE_URL=${{ github.event.inputs.base_url }}" >> $GITHUB_ENV
          echo "OS_VERSION=${{ github.event.inputs.os_version }}" >> $GITHUB_ENV
          echo "OS_PRERELEASE_TAG=${{ github.event.inputs.os_prerelease_tag }}" >> $GITHUB_ENV
          echo "OS_BUILD_SHA=${{ github.event.inputs.os_build_sha }}" >> $GITHUB_ENV
        else
          # ${{ github.event_name == 'repository_dispatch' }}
          echo "github.event.client_payload"
          echo "${{ toJSON(github.event.client_payload) }}"
          echo "BASE_URL=${{ github.event.client_payload.base_url }}" >> $GITHUB_ENV
          echo "OS_VERSION=${{ github.event.client_payload.os_version }}" >> $GITHUB_ENV
          echo "OS_PRERELEASE_TAG=${{ github.event.client_payload.os_prerelease_tag }}" >> $GITHUB_ENV
          echo "OS_BUILD_SHA=${{ github.event.client_payload.os_build_sha }}" >> $GITHUB_ENV
        fi;

    - name: Download and install OS SDK installer
      shell: bash
      run: |
        set -x
        installer_url="$BASE_URL/OpenStudio-$OS_VERSION$OS_PRERELEASE_TAG%2B$OS_BUILD_SHA-Darwin-x86_64.tar.gz"
        dirname=OpenStudio-$OS_VERSION$OS_PRERELEASE_TAG+$OS_BUILD_SHA-Darwin-x86_64
        echo "Installer link: $installer_url"
        wget --quiet $installer_url
        tar xfz $dirname.tar.gz

        OS_ROOT_DIR=$(pwd)/$dirname
        echo "OS_ROOT_DIR=$OS_ROOT_DIR" >> $GITHUB_ENV
        cp -R $OS_ROOT_DIR/Examples/compact_osw/* .
        ls
        echo "puts ARGV" > test.rb

        export PATH="$OS_ROOT_DIR/bin:$PATH"
        echo "$OS_ROOT_DIR/bin" >> $GITHUB_PATH

        openstudio openstudio_version
        echo "PATH=$PATH"

        if openstudio labs; then
          echo "The Ruby CLI is the default"
          echo CLASSIC_SUBCOMMAND= >> $GITHUB_ENV
          echo LABS_SUBCOMMAND=labs >> $GITHUB_ENV
        else
          echo "The C++ CLI is the default"
          echo CLASSIC_SUBCOMMAND=classic >> $GITHUB_ENV
          echo LABS_SUBCOMMAND= >> $GITHUB_ENV
        fi

        brew install tree

    - name: EnergyPlus itself works
      shell: bash
      run: |
        $OS_ROOT_DIR/EnergyPlus/energyplus --help

    - name: Classic Ruby CLI test
      shell: bash
      run: |
        set -x
        openstudio --help
        openstudio $CLASSIC_SUBCOMMAND openstudio_version
        openstudio $CLASSIC_SUBCOMMAND energyplus_version
        openstudio $CLASSIC_SUBCOMMAND ruby_version
        openstudio $CLASSIC_SUBCOMMAND -e "puts OpenStudio::Model::Model.new()"
        openstudio $CLASSIC_SUBCOMMAND -e "require 'oga'; puts Oga::VERSION"
        openstudio $CLASSIC_SUBCOMMAND execute_ruby_script test.rb -x arg2
        openstudio $CLASSIC_SUBCOMMAND run -w compact_ruby_only.osw

    - name: Labs C++ CLI Test
      shell: bash
      run: |
        set -x
        openstudio $LABS_SUBCOMMAND --help
        openstudio $LABS_SUBCOMMAND openstudio_version
        openstudio $LABS_SUBCOMMAND energyplus_version
        openstudio $LABS_SUBCOMMAND ruby_version
        openstudio $LABS_SUBCOMMAND python_version
        openstudio $LABS_SUBCOMMAND -e "puts OpenStudio::Model::Model.new()"
        openstudio $LABS_SUBCOMMAND -e "require 'oga'; puts Oga::VERSION"
        openstudio $LABS_SUBCOMMAND execute_ruby_script test.rb -x arg2
        openstudio $LABS_SUBCOMMAND run -w compact_ruby_only.osw
        openstudio $LABS_SUBCOMMAND run -w compact_python_only_twomeasures.osw
        openstudio $LABS_SUBCOMMAND run -w compact_ruby_then_python.osw
        openstudio $LABS_SUBCOMMAND run -w compact_python_then_ruby.osw

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.2

    - name: test loading the bindings in system ruby
      shell: bash
      run: |
        ruby --version
        ruby -I$OS_ROOT_DIR/Ruby/ -e "require 'openstudio'; puts OpenStudio.openStudioLongVersion()"

    - uses: actions/setup-python@v4
      with:
        python-version: '3.8.x'

    - name: test loading the bindings in system python
      shell: bash
      run: |
        python --version
        python -c "import sys; sys.path.insert(0, '$OS_ROOT_DIR/Python/'); import openstudio; print(openstudio.openStudioLongVersion())"

    - name: Inspect libs
      shell: bash
      if: ${{ always() }}
      run: |
        separator() {
          echo -e "\n\033[0;31m===========================================================\033[0m"
        };

        inspect_lib() {
          separator
          echo -e "\033[0;33m$1\033[0m"
          otool -L $1
          otool -l $1 | grep -A2 LC_RPATH || true
        }

        cd $OS_ROOT_DIR

        inspect_lib bin/openstudio

        inspect_lib lib/libopenstudiolib.dylib

        inspect_lib lib/libpythonengine.so

        inspect_lib lib/librubyengine.so

        inspect_lib Python/_openstudiomodel.so

        inspect_lib Ruby/openstudio.bundle

        inspect_lib EnergyPlus/energyplus
        inspect_lib EnergyPlus/libenergyplusapi.dylib
        inspect_lib EnergyPlus/ExpandObjects

    - name: Print OS SDK tree
      shell: bash
      if: ${{ always() }}
      run: |
        cd $OS_ROOT_DIR
        tree -I 'Radiance|python_standard_lib|include'
