name: Test CLI - Ubuntu Jammy docker

on:
  workflow_dispatch:
    inputs:
      base_url:
        description: 'The base url to use to download each platform'
        required: true
        default: 'http://openstudio-ci-builds.s3-website-us-west-2.amazonaws.com/PR-4731'
      os_version:
        description: 'OpenStudio Version (e.g. 3.5.0)'
        required: true
        default: '3.5.0'
      os_prerelease_tag:
        description: 'Pre-release tag (e.g. -alpha, -rc1). Leave empty if none'
        required: false
      os_build_sha:
         description: 'OpenStudio Build sha (at least the first 10 chars)'
         required: true
         default: 'f9e7e978ae'
  repository_dispatch:
    types: [on-demand-test, on-demand-ubuntu-test]

jobs:
  installer_ubuntu_2204:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:jammy

    steps:

    - name: Handle workflow_dispatch and repository_dispatch
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.COMMIT_STATUS_TOKEN }}
      run: |
        set -x
        apt-get -qq update && apt-get -qq install -y wget git curl binutils tree
        wget --quiet https://github.com/cli/cli/releases/download/v2.18.1/gh_2.18.1_linux_amd64.deb
        apt-get -qq install -y ./gh_2.18.1_linux_amd64.deb

        if [[ "${{ github.event_name }}" == 'workflow_dispatch' ]]; then
          echo "BASE_URL=${{ github.event.inputs.base_url}}" >> $GITHUB_ENV
          echo "OS_VERSION=${{ github.event.inputs.os_version}}" >> $GITHUB_ENV
          echo "OS_PRERELEASE_TAG=${{ github.event.inputs.os_prerelease_tag}}" >> $GITHUB_ENV
          OS_BUILD_SHA=${{ github.event.inputs.os_build_sha}}
        else
          # ${{ github.event_name == 'repository_dispatch' }}
          echo "BASE_URL=${{ github.event.client_payload.base_url}}" >> $GITHUB_ENV
          echo "OS_VERSION=${{ github.event.client_payload.os_version}}" >> $GITHUB_ENV
          echo "OS_PRERELEASE_TAG=${{ github.event.client_payload.os_prerelease_tag}}" >> $GITHUB_ENV
          OS_BUILD_SHA=${{ github.event.client_payload.os_build_sha}}
        fi;
        OS_FULL_SHA=$(gh api repos/NREL/OpenStudio/commits/$OS_BUILD_SHA --jq ".sha")
        OS_BUILD_SHA=${OS_FULL_SHA:0:10}

        echo "OS_BUILD_SHA=$OS_BUILD_SHA" >> $GITHUB_ENV
        echo "OS_FULL_SHA=$OS_FULL_SHA" >> $GITHUB_ENV

        gh api --method POST -H "Accept: application/vnd.github+json" /repos/NREL/OpenStudio/statuses/$OS_FULL_SHA -f target_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" -f context="OpenStudio-Tester/Ubuntu" -f state="pending" || true
        echo "STEP_DESCRIPTION=pending" >> $GITHUB_ENV

    - name: Download and install OS SDK installer
      shell: bash
      run: |
        echo "STEP_DESCRIPTION=download" >> $GITHUB_ENV
        set -x
        installer_url="$BASE_URL/OpenStudio-$OS_VERSION$OS_PRERELEASE_TAG%2B$OS_BUILD_SHA-Ubuntu-22.04-x86_64.deb"
        echo "Installer link: $installer_url"
        wget --quiet $installer_url
        apt-get -qq install -y ./OpenStudio*.deb
        openstudio openstudio_version
        echo "PATH=$PATH"

        OS_ROOT_DIR=/usr/local/openstudio-$OS_VERSION$OS_PRERELEASE_TAG
        echo "OS_ROOT_DIR=$OS_ROOT_DIR" >> $GITHUB_ENV
        cp -R $OS_ROOT_DIR/Examples/compact_osw/* .
        ls
        echo "puts ARGV" > test.rb

        if openstudio labs; then
          echo "The Ruby CLI is the default"
          echo CLASSIC_SUBCOMMAND= >> $GITHUB_ENV
          echo LABS_SUBCOMMAND=labs >> $GITHUB_ENV
        else
          echo "The C++ CLI is the default"
          echo CLASSIC_SUBCOMMAND=classic >> $GITHUB_ENV
          echo LABS_SUBCOMMAND= >> $GITHUB_ENV
        fi

    - name: EnergyPlus itself works
      shell: bash
      run: |
        echo "STEP_DESCRIPTION='EnergyPlus itself works'" >> $GITHUB_ENV
        $OS_ROOT_DIR/EnergyPlus/energyplus --help || echo "EnergyPlus missing dependencies!" && apt-get -qq install -y libgomp1 libx11-6 && $OS_ROOT_DIR/EnergyPlus/energyplus --help

    - name: Ruby Classic CLI test
      shell: bash
      run: |
        echo "STEP_DESCRIPTION='Basic CLI test'" >> $GITHUB_ENV
        set -x
        openstudio $CLASSIC_SUBCOMMAND --help
        openstudio $CLASSIC_SUBCOMMAND openstudio_version
        openstudio $CLASSIC_SUBCOMMAND energyplus_version
        openstudio $CLASSIC_SUBCOMMAND ruby_version
        openstudio $CLASSIC_SUBCOMMAND -e "puts OpenStudio::Model::Model.new()"
        openstudio $CLASSIC_SUBCOMMAND -e "require 'oga'; puts Oga::VERSION"
        openstudio $CLASSIC_SUBCOMMAND execute_ruby_script test.rb -x arg2
        openstudio $CLASSIC_SUBCOMMAND run -w compact_ruby_only.osw

    - name: C++ Labs CLI Test
      shell: bash
      run: |
        echo "STEP_DESCRIPTION='Labs CLI Test'" >> $GITHUB_ENV
        set -x
        openstudio $LABS_SUBCOMMAND --help
        openstudio $LABS_SUBCOMMAND openstudio_version
        openstudio $LABS_SUBCOMMAND energyplus_version
        openstudio $LABS_SUBCOMMAND ruby_version
        openstudio $LABS_SUBCOMMAND python_version
        openstudio $LABS_SUBCOMMAND -e "puts OpenStudio::Model::Model.new()"
        openstudio $LABS_SUBCOMMAND -e "require 'oga'; puts Oga::VERSION"
        openstudio $LABS_SUBCOMMAND execute_ruby_script test.rb -x arg2
        openstudio $LABS_SUBCOMMAND run -w compact_ruby_only.osw
        openstudio $LABS_SUBCOMMAND run -w compact_python_only_twomeasures.osw
        openstudio $LABS_SUBCOMMAND run -w compact_ruby_then_python.osw
        openstudio $LABS_SUBCOMMAND run -w compact_python_then_ruby.osw

    - name: test loading the bindings in system ruby
      shell: bash
      run: |
        echo "STEP_DESCRIPTION='Ruby bindings'" >> $GITHUB_ENV
        wget https://github.com/jmarrec/OpenStudio-Tester/releases/download/dependencies/ruby-3.2.2-ubuntu22.04.deb
        apt-get -qq install -y ./ruby-3.2.2-ubuntu22.04.deb
        rm -Rf ruby-3.2.2-ubuntu22.04.deb
        ruby --version
        ruby -I$OS_ROOT_DIR/Ruby/ -e "require 'openstudio'; puts OpenStudio.openStudioLongVersion()"

    - name: test loading the bindings in system python
      shell: bash
      run: |
        echo "STEP_DESCRIPTION='Python bindings'" >> $GITHUB_ENV
        apt-get install -y software-properties-common
        add-apt-repository -y ppa:deadsnakes/ppa
        apt-get update
        export TZ=US
        ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
        apt-get -qq install -y python3.8
        python3.8 --version
        python3.8 -c "import sys; sys.path.insert(0, '$OS_ROOT_DIR/Python/'); import openstudio; print(openstudio.openStudioLongVersion())"

    - name: post status
      shell: bash
      if: ${{ failure() }}
      env:
        GITHUB_TOKEN: ${{ secrets.COMMIT_STATUS_TOKEN }}
      run: |
        gh api --method POST -H "Accept: application/vnd.github+json" /repos/NREL/OpenStudio/statuses/$OS_FULL_SHA -f target_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" -f context="OpenStudio-Tester/Ubuntu" -f state=failure" -f description="$STEP_DESCRIPTION" || true

    - name: post status
      shell: bash
      if: ${{ success() }}
      env:
        GITHUB_TOKEN: ${{ secrets.COMMIT_STATUS_TOKEN }}
      run: |
        gh api --method POST -H "Accept: application/vnd.github+json" /repos/NREL/OpenStudio/statuses/$OS_FULL_SHA -f target_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" -f context="OpenStudio-Tester/Ubuntu" -f state="success" -f description="CLI Test on Docker ubuntu:focal" || true

    - name: Inspect libs
      shell: bash
      if: ${{ always() }}
      run: |
        separator() {
          echo -e "\n\033[0;31m===========================================================\033[0m"
        };

        inspect_lib() {
          separator
          echo -e "\033[0;33m$1\033[0m"
          ldd $1
          objdump -x $1 | grep RUNPATH || true
        }

        cd $OS_ROOT_DIR

        inspect_lib bin/openstudio

        inspect_lib lib/libopenstudiolib.so

        inspect_lib lib/libpythonengine.so

        inspect_lib lib/librubyengine.so

        inspect_lib Python/_openstudiomodel.so

        inspect_lib Ruby/openstudio.so

        inspect_lib EnergyPlus/energyplus
        inspect_lib EnergyPlus/libenergyplusapi.dylib
        inspect_lib EnergyPlus/ExpandObjects

    - name: Print OS SDK tree
      shell: bash
      if: ${{ always() }}
      run: |
        cd $OS_ROOT_DIR
        tree -I 'Radiance|python_standard_lib|include'

#    - uses: 8398a7/action-slack@v3
#      if: always() # Pick up events even if the job fails or is canceled.
#      with:
#        status: ${{ job.status }}
#        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
#      env:
#        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
